import logging
import asyncio
import time
import os
import threading
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import string

API_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_ID
CHAT_ID = os.getenv("CHAT_ID", "")  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CHAT_ID

if not API_TOKEN or not CHAT_ID or not ADMIN_ID:
    logging.warning(
        "BOT_TOKEN, CHAT_ID –∏–ª–∏ ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    )

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
questions = [
    {
        "q": "–í–æ–ø—Ä–æ—Å 1\n–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏–π—Ç–∏ –≤ –æ—Ñ–∏—Å –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É?",
        "options": ["1. 1 –¥–µ–Ω—å", "2. 7 –¥–Ω–µ–π", "3. 14 –¥–Ω–µ–π"],
        "answer": 2
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 2\n–ö–∞–∫–æ–π –¥–æ—Ö–æ–¥ —É –ø–µ—à–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å?",
        "options": ["1. –î–æ—Ö–æ–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–∫–∞–∑–æ–≤, 3000-4000 —Ä—É–±", "2. 3000 —Ä—É–±", "3. –û—Ç 3400 —Ä—É–±", "4. –î–æ 3400 —Ä—É–±"],
        "answer": 3
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 3\n–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—É –±–æ–Ω—É—Å?",
        "options": ["1. –¢–æ–ª—å–∫–æ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ", "2. –ù–µ—Ç, –Ω–µ–ª—å–∑—è", "3. –ú–æ–∂–Ω–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 1000 —Ä—É–±", "4. –ú–æ–∂–Ω–æ"],
        "answer": 2
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 4\n–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
        "options": ["1. –†–∞–±–æ—Ç–∞ –Ø–Ω–¥–µ–∫—Å –ï–¥–µ", "2. –ö—É—Ä—å–µ—Ä –Ø–Ω–¥–µ–∫—Å –ï–¥—ã", "3. –ö—É—Ä—å–µ—Ä - –ü–∞—Ä—Ç–Ω–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å –ï–¥–∞", "4. –í–∞–∫–∞–Ω—Å–∏—è –∫—É—Ä—å–µ—Ä–∞ –≤ –Ø–Ω–¥–µ–∫—Å"],
        "answer": 3
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 5\n–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–º–µ—Å—Ç–æ '–°–º–µ–Ω–∞'?",
        "options": ["1. –ì—Ä–∞—Ñ–∏–∫", "2. –†–∞–±–æ—á–∏–π –¥–µ–Ω—å", "3. –°–ª–æ—Ç"],
        "answer": 3
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 6\n–ú–æ–∂–Ω–æ –ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?",
        "options": ["1. –ú–æ–∂–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –ê–≤–∏—Ç–æ", "2. –ù–µ—Ç - —ç—Ç–æ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", "3. –ú–æ–∂–Ω–æ –≤–µ–∑–¥–µ", "4. –¢–æ–ª—å–∫–æ –≤–æ–∑—Ä–∞—Å—Ç"],
        "answer": 2
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 7\n–ì–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤?",
        "options": ["1. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ", "2. –£ —Å–∞–º–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤", "3. –í –¢–ì –±–æ—Ç–µ"],
        "answer": 1
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 8\n–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?",
        "options": ["1. –£–∑–Ω–∞—é —Å—Ä–µ–¥–∏ –∑–Ω–∞–∫–æ–º—ã—Ö", "2. –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "3. –í—ã–±–µ—Ä—É job —Å–∞–π—Ç—ã", "4. –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"],
        "answer": 4
    },
    {
        "q": "–í–æ–ø—Ä–æ—Å 9\n–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –õ–ö?",
        "options": ["1. –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞", "2. –°–ø—Ä–æ—Å–∏—Ç—å –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ", "3. –ö–∞–∫ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç - –Ω–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É"],
        "answer": 3
    }
]

user_data = {}

async def generate_personal_link(user_name: str):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Telegram API"""
    try:
        url = f"https://api.telegram.org/bot{API_TOKEN}/createChatInviteLink"
        data = {
            "chat_id": CHAT_ID,
            "name": f"–°—Å—ã–ª–∫–∞ –¥–ª—è {user_name}",
            "expire_date": int(time.time()) + 86400,  # 24 —á–∞—Å–∞
            "member_limit": 1  # —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                result = await response.json()
                if result.get("ok"):
                    return result["result"]["invite_link"]
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {result}")
                    return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."  # Fallback —Å—Å—ã–ª–∫–∞
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return f"https://t.me/your_channel"  # Fallback —Å—Å—ã–ª–∫–∞

def get_keyboard(options):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for i, opt in enumerate(options, 1):
        kb.inline_keyboard.append([InlineKeyboardButton(text=opt, callback_data=f"answer_{i}")])
    return kb

async def notify_admin(user_info, score, passed):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    status = "‚úÖ –£–°–ü–ï–®–ù–û" if passed else "‚ùå –ù–ï–£–î–ê–ß–ù–û"
    message = (
        f"üîî –ù–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –¢–ï–°–¢–ï\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['first_name']} {user_info.get('last_name', '')}\n"
        f"üÜî ID: {user_info['id']}\n"
        f"üìù Username: @{user_info.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}\n"
        f"üéØ –ë–∞–ª–ª–æ–≤: {score}/{len(questions)}"
    )
    
    try:
        await bot.send_message(ADMIN_ID, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_data[message.from_user.id] = {"score": 0, "q_index": 0}
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next")]])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç–∞–∂–µ—Ä–∞–º - —Ä–µ–∫—Ä—É—Ç—ë—Ä–∞–º‚ò∫Ô∏è\n"
        "–†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ: - –í—ã –±—É–¥–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ "
        "–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å.–ï–¥–∞.\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏—Ö –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.\n\n"
        "–ü–æ—á–µ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ –í–∞–º:\n"
        "1. –î–æ—Ö–æ–¥ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—Ä–∞–∑–º–µ—Ä –≤—ã–ø–ª–∞—Ç –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –í–∞—Å)\n"
        "2. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ (–Ω–µ—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞)\n"
        "3. –ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞)\n"
        "4. –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º, –≥–¥–µ —É–≥–æ–¥–Ω–æ (–†–∞–±–æ—Ç–∞—Ç—å –º–æ–∂–Ω–æ –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞)\n\n"
        "–í–∞—à –ø—É—Ç—å –∫ –≤—ã–ø–ª–∞—Ç–∞–º\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–ª–∞–≤–∏—à—É ¬´–î–∞–ª–µ–µ¬ªüëáüèª",
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data == "next")
async def send_video(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", url="https://youtu.be/P9eduz6PiKY?si=2mh8gEB8raXeR_4d")],
        [InlineKeyboardButton(text="–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–≤–∏–ª", url="https://docs.google.com/spreadsheets/d/1QyUGQb6XWDoYuOam03paEcvXZLd1p7v1swY9MvZJ6Aw/edit?usp=sharing")],
        [InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="practical_part")]
    ])
    await callback.message.edit_text(
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ–±—É—á–∞—é—â–∏–π –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫.\n"
        "–ü—Ä–æ—Å—å–±–∞ –≤—ã—Å–ª—É—à–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ—Å—Ç—å –Ω–∏–∂–µ.\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π.\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç. –û—Ç–Ω–µ—Å–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –ø—Ä–æ–¥–æ–ª–∂–∏–º üòä",
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data == "practical_part")
async def practical_part(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")]])
    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–π–¥–µ–º –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏.\n"
        "–ü–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —è –ø—Ä–∏–≥–ª–∞—à—É —Ç–µ–±—è –≤ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –ö–∞–Ω–∞–ª –∏ –ø–µ—Ä–µ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç –ö—É—Ä–∞—Ç–æ—Ä–∞, –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä–µ —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n"
        "–£–¥–∞—á–∏! ü§ù",
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data == "start_test")
async def start_test(callback: types.CallbackQuery):
    user_data[callback.from_user.id] = {"score": 0, "q_index": 0}
    q = questions[0]
    await callback.message.edit_text(q["q"], reply_markup=get_keyboard(q["options"]))

@dp.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        return

    data = user_data[user_id]
    q_index = data["q_index"]

    if q_index < len(questions):
        q = questions[q_index]
        choice = int(callback.data.split("_")[1])

        if choice == q["answer"]:
            data["score"] += 1

        data["q_index"] += 1

        if data["q_index"] < len(questions):
            next_q = questions[data["q_index"]]
            await callback.message.edit_text(next_q["q"], reply_markup=get_keyboard(next_q["options"]))
        else:
            score = data["score"]
            passed = score >= 9
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            user_info = {
                'id': callback.from_user.id,
                'first_name': callback.from_user.first_name,
                'last_name': callback.from_user.last_name,
                'username': callback.from_user.username
            }
            await notify_admin(user_info, score, passed)
            
            if passed:
                user_name = callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                personal_link = await generate_personal_link(user_name)
                if personal_link:
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=personal_link)]]
                    )
                    text = (
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —Ç–µ—Å—Ç —Å {score} –±–∞–ª–ª–∞–º–∏ –∏–∑ {len(questions)}!\n\n"
                        f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{personal_link}\n\n"
                        "–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É:\n"
                        "üëâ @YEats_aleksei\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª üëá"
                    )
                    await callback.message.edit_text(text, reply_markup=kb)
                else:
                    await callback.message.edit_text(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —Ç–µ—Å—Ç —Å {score} –±–∞–ª–ª–∞–º–∏ –∏–∑ {len(questions)}!\n\n"
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    )
            else:
                kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="start_test")]])
                await callback.message.edit_text(
                    f"‚ùå –£ –í–∞—Å {score} –±–∞–ª–ª–æ–≤ –∏–∑ {len(questions)}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –µ—Å—Ç—å –æ—à–∏–±–∫–∏.\n"
                    "–ü—Ä–æ—á—Ç–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ üòâ",
                    reply_markup=kb
                )

@dp.message()
async def handle_text(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
    if message.text == "/test":
        await start_test(types.CallbackQuery(id="", from_user=message.from_user, chat_instance="", message=message))

async def main():
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    # –í –ø–æ—Ç–æ–∫–∞—Ö –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Ö
    is_main_thread = threading.current_thread() is threading.main_thread()
    await dp.start_polling(
        bot,
        skip_updates=True,
        handle_signals=is_main_thread,
    )

if __name__ == "__main__":
    asyncio.run(main())
